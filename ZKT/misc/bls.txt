yarn run v1.22.21
$ ts-node scripts/b.ts
{
  getPublicKey: [Function: getPublicKey],
  getPublicKeyForShortSignatures: [Function: getPublicKeyForShortSignatures],
  sign: [Function: sign],
  signShortSignature: [Function: signShortSignature],
  verify: [Function: verify],
  verifyBatch: [Function: verifyBatch],
  verifyShortSignature: [Function: verifyShortSignature],
  aggregatePublicKeys: [Function: aggregatePublicKeys],
  aggregateSignatures: [Function: aggregateSignatures],
  aggregateShortSignatures: [Function: aggregateShortSignatures],
  millerLoop: [Function: millerLoop],
  pairing: [Function: pairing],
  G1: {
    CURVE: {
      nBitLength: 255,
      nByteLength: 32,
      n: 52435875175126190479447740508185965837690552500527637822603658699938581184513n,
      Fp: [Object],
      h: 76329603384216526031706109802092473003n,
      Gx: 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,
      Gy: 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569n,
      a: 0n,
      b: 4n,
      htfDefaults: [Object],
      wrapPrivateKey: true,
      allowInfinityPoint: true,
      isTorsionFree: [Function: isTorsionFree],
      clearCofactor: [Function: clearCofactor],
      mapToCurve: [Function: mapToCurve],
      fromBytes: [Function: fromBytes],
      toBytes: [Function: toBytes],
      ShortSignature: [Object],
      p: 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787n
    },
    ProjectivePoint: [class Point] { BASE: [Point], ZERO: [Point] },
    normPrivateKeyToScalar: [Function: normPrivateKeyToScalar],
    weierstrassEquation: [Function: weierstrassEquation],
    isWithinCurveOrder: [Function: isWithinCurveOrder],
    hashToCurve: [Function: hashToCurve],
    encodeToCurve: [Function: encodeToCurve]
  },
  G2: {
    CURVE: {
      nBitLength: 255,
      nByteLength: 32,
      n: 52435875175126190479447740508185965837690552500527637822603658699938581184513n,
      Fp: [Object],
      h: 305502333931268344200999753193121504214466019254188142667664032982267604182971884026507427359259977847832272839041616661285803823378372096355777062779109n,
      Gx: [Object],
      Gy: [Object],
      a: [Object],
      b: [Object],
      hEff: 209869847837335686905080341498658477663839067235703451875306851526599783796572738804459333109033834234622528588876978987822447936461846631641690358257586228683615991308971558879306463436166481n,
      htfDefaults: [Object],
      wrapPrivateKey: true,
      allowInfinityPoint: true,
      mapToCurve: [Function: mapToCurve],
      isTorsionFree: [Function: isTorsionFree],
      clearCofactor: [Function: clearCofactor],
      fromBytes: [Function: fromBytes],
      toBytes: [Function: toBytes],
      Signature: [Object],
      p: 16019282247729705411943748644318972617695120099330552659862384536985976748491357143400656079302193429974954385540170730531103884539706905936200202421036435811093013034271812758016407969496331661418541023677774899971425993489485369n
    },
    ProjectivePoint: [class Point] { BASE: [Point], ZERO: [Point] },
    normPrivateKeyToScalar: [Function: normPrivateKeyToScalar],
    weierstrassEquation: [Function: weierstrassEquation],
    isWithinCurveOrder: [Function: isWithinCurveOrder],
    hashToCurve: [Function: hashToCurve],
    encodeToCurve: [Function: encodeToCurve]
  },
  Signature: {
    fromHex: [Function: fromHex],
    toRawBytes: [Function: toRawBytes],
    toHex: [Function: toHex]
  },
  ShortSignature: {
    fromHex: [Function: fromHex],
    toRawBytes: [Function: toRawBytes],
    toHex: [Function: toHex]
  },
  fields: {
    Fr: {
      ORDER: 52435875175126190479447740508185965837690552500527637822603658699938581184513n,
      BITS: 255,
      BYTES: 32,
      MASK: 57896044618658097711785492504343953926634992332820282019728792003956564819967n,
      ZERO: 0n,
      ONE: 1n,
      create: [Function: create],
      isValid: [Function: isValid],
      is0: [Function: is0],
      isOdd: [Function: isOdd],
      neg: [Function: neg],
      eql: [Function: eql],
      sqr: [Function: sqr],
      add: [Function: add],
      sub: [Function: sub],
      mul: [Function: mul],
      pow: [Function: pow],
      div: [Function: div],
      sqrN: [Function: sqrN],
      addN: [Function: addN],
      subN: [Function: subN],
      mulN: [Function: mulN],
      inv: [Function: inv],
      sqrt: [Function (anonymous)],
      invertBatch: [Function: invertBatch],
      cmov: [Function: cmov],
      toBytes: [Function: toBytes],
      fromBytes: [Function: fromBytes]
    },
    Fp: {
      ORDER: 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787n,
      BITS: 381,
      BYTES: 48,
      MASK: 4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455100828498788351n,
      ZERO: 0n,
      ONE: 1n,
      create: [Function: create],
      isValid: [Function: isValid],
      is0: [Function: is0],
      isOdd: [Function: isOdd],
      neg: [Function: neg],
      eql: [Function: eql],
      sqr: [Function: sqr],
      add: [Function: add],
      sub: [Function: sub],
      mul: [Function: mul],
      pow: [Function: pow],
      div: [Function: div],
      sqrN: [Function: sqrN],
      addN: [Function: addN],
      subN: [Function: subN],
      mulN: [Function: mulN],
      inv: [Function: inv],
      sqrt: [Function (anonymous)],
      invertBatch: [Function: invertBatch],
      cmov: [Function: cmov],
      toBytes: [Function: toBytes],
      fromBytes: [Function: fromBytes]
    },
    Fp2: {
      ORDER: 16019282247729705411943748644318972617695120099330552659862384536985976748491357143400656079302193429974954385540170730531103884539706905936200202421036435811093013034271812758016407969496331661418541023677774899971425993489485369n,
      BITS: 762,
      BYTES: 96,
      MASK: 24258095192198577111702804507226602425888844017448384549047688094157046135724638848919975137947601217976370792142673018846430938189293974866316988672518455300069609000325779774222895087993725700394734362401819824232700732090875903n,
      ZERO: [Object],
      ONE: [Object],
      create: [Function: create],
      isValid: [Function: isValid],
      is0: [Function: is0],
      eql: [Function: eql],
      neg: [Function: neg],
      pow: [Function: pow],
      invertBatch: [Function: invertBatch],
      add: [Function: Fp2Add],
      sub: [Function: Fp2Subtract],
      mul: [Function: Fp2Multiply],
      sqr: [Function: Fp2Square],
      addN: [Function: Fp2Add],
      subN: [Function: Fp2Subtract],
      mulN: [Function: Fp2Multiply],
      sqrN: [Function: Fp2Square],
      div: [Function: div],
      inv: [Function: inv],
      sqrt: [Function: sqrt],
      isOdd: [Function: isOdd],
      fromBytes: [Function: fromBytes],
      toBytes: [Function: toBytes],
      cmov: [Function: cmov],
      reim: [Function: reim],
      mulByNonresidue: [Function: mulByNonresidue],
      multiplyByB: [Function: multiplyByB],
      fromBigTuple: [Function: fromBigTuple],
      frobeniusMap: [Function: frobeniusMap]
    },
    Fp6: {
      ORDER: 16019282247729705411943748644318972617695120099330552659862384536985976748491357143400656079302193429974954385540170730531103884539706905936200202421036435811093013034271812758016407969496331661418541023677774899971425993489485369n,
      BITS: 2286,
      BYTES: 288,
      MASK: 14274801829880269746276854604867257916358676237211516835583719038828949945370255147811601448608127648836903869795978134476664278582197739673308911918756706274088134187326019999303241854313997145563995809282248938509721929976155011459036104079835736351026783940127444668083072927333489182800098189747754614469912010386656293498627357313605044124371403908656054471229604007170458547373669554366874015848018221199383063631259369397813334811034598108083859417173243590087683794263578620860367335225933270850525932369999934981719332084147037581182750764374846280956776800222557348472281473959161708593196193109327820894433665889534998184172436733774109603333978144308485496452261517380250763263n,
      ZERO: [Object],
      ONE: [Object],
      create: [Function: create],
      isValid: [Function: isValid],
      is0: [Function: is0],
      neg: [Function: neg],
      eql: [Function: eql],
      sqrt: [Function: sqrt],
      div: [Function: div],
      pow: [Function: pow],
      invertBatch: [Function: invertBatch],
      add: [Function: Fp6Add],
      sub: [Function: Fp6Subtract],
      mul: [Function: Fp6Multiply],
      sqr: [Function: Fp6Square],
      addN: [Function: Fp6Add],
      subN: [Function: Fp6Subtract],
      mulN: [Function: Fp6Multiply],
      sqrN: [Function: Fp6Square],
      inv: [Function: inv],
      fromBytes: [Function: fromBytes],
      toBytes: [Function: toBytes],
      cmov: [Function: cmov],
      fromBigSix: [Function: fromBigSix],
      frobeniusMap: [Function: frobeniusMap],
      mulByNonresidue: [Function: mulByNonresidue],
      multiplyBy1: [Function: multiplyBy1],
      multiplyBy01: [Function: multiplyBy01],
      multiplyByFp2: [Function: multiplyByFp2]
    },
    Fp12: {
      ORDER: 16019282247729705411943748644318972617695120099330552659862384536985976748491357143400656079302193429974954385540170730531103884539706905936200202421036435811093013034271812758016407969496331661418541023677774899971425993489485369n,
      BITS: 1524,
      BYTES: 192,
      MASK: 588455182353767721821317530768631375222679015611740466640545663834291355369092578288350835963707531656115421455294923043911722895213612872307034420871771155140432944184967095891304218241621459882042368930026323256249352016089990016958346465356325186767044834312085126374383143379301129983348184562447722258390861598931052720472224612197939074726704000940161375418674873895665681440799576124236663862856568907957235815113762454229942217871394772181885927817215n,
      ZERO: [Object],
      ONE: [Object],
      create: [Function: create],
      isValid: [Function: isValid],
      is0: [Function: is0],
      neg: [Function: neg],
      eql: [Function: eql],
      sqrt: [Function: sqrt],
      inv: [Function: inv],
      div: [Function: div],
      pow: [Function: pow],
      invertBatch: [Function: invertBatch],
      add: [Function: Fp12Add],
      sub: [Function: Fp12Subtract],
      mul: [Function: Fp12Multiply],
      sqr: [Function: Fp12Square],
      addN: [Function: Fp12Add],
      subN: [Function: Fp12Subtract],
      mulN: [Function: Fp12Multiply],
      sqrN: [Function: Fp12Square],
      fromBytes: [Function: fromBytes],
      toBytes: [Function: toBytes],
      cmov: [Function: cmov],
      fromBigTwelve: [Function: fromBigTwelve],
      frobeniusMap: [Function: frobeniusMap],
      multiplyBy014: [Function: multiplyBy014],
      multiplyByFp2: [Function: multiplyByFp2],
      conjugate: [Function: conjugate],
      _cyclotomicSquare: [Function: _cyclotomicSquare],
      _cyclotomicExp: [Function: _cyclotomicExp],
      finalExponentiate: [Function: finalExponentiate]
    }
  },
  params: {
    x: 15132376222941642752n,
    r: 52435875175126190479447740508185965837690552500527637822603658699938581184513n,
    G1b: 4n,
    G2b: { c0: 4n, c1: 4n }
  },
  utils: {
    randomPrivateKey: [Function: randomPrivateKey],
    calcPairingPrecomputes: [Function: calcPairingPrecomputes]
  }
}
test
Done in 0.86s.
